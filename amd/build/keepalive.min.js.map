{"version":3,"sources":["../src/keepalive.js"],"names":["define","$","config","log","keepaliveInterval","formElements","dirty","doKeepAlive","ajax","url","wwwroot","dataType","type","data","sesskey","now","headers","error","request","status","clearInterval","debug","checkKeepAlive","markDirty","off","init","params","keepaliveinterval","length","on","setInterval"],"mappings":"AAQAA,OAAM,qCAAC,CAAC,QAAD,CAAW,aAAX,CAA0B,UAA1B,CAAD,CAAwC,SAASC,CAAT,CAAYC,CAAZ,CAAoBC,CAApB,CAAyB,CACnE,aADmE,GAI/DC,CAAAA,CAAiB,CAAG,IAJ2C,CAO/DC,CAAY,CAAG,IAPgD,CAU/DC,CAAK,GAV0D,CAenE,QAASC,CAAAA,CAAT,EAAuB,CAInBN,CAAC,CAACO,IAAF,CAAO,CACHC,GAAG,CAAEP,CAAM,CAACQ,OAAP,CAAiB,oDADnB,CAEHC,QAAQ,CAAE,MAFP,CAGHC,IAAI,CAAE,MAHH,CAIHC,IAAI,CAAE,CAEF,QAAWX,CAAM,CAACY,OAFhB,CAIF,KAAQb,CAAC,CAACc,GAAF,EAJN,CAJH,CAUHC,OAAO,CAAE,CACL,gBAAiB,UADZ,CAEL,QAAW,IAFN,CAVN,CAsBHC,KAAK,CAAE,eAASC,CAAT,CAAkB,CAErB,GAAsB,GAAlB,EAAAA,CAAO,CAACC,MAAZ,CAA2B,CAEvBC,aAAa,CAAChB,CAAD,CAGhB,CALD,IAKO,IAAsB,GAAlB,EAAAc,CAAO,CAACC,MAAR,EAA2C,GAAlB,EAAAD,CAAO,CAACC,MAArC,CAAoD,CAEvDhB,CAAG,CAACkB,KAAJ,wIAEH,CACJ,CAlCE,CAAP,CAoCH,CAKD,QAASC,CAAAA,CAAT,EAA0B,CAEtB,GAAI,KAAAhB,CAAJ,CAAoB,CAEhBC,CAAW,EACd,CACJ,CAKD,QAASgB,CAAAA,CAAT,EAAqB,CAEjBjB,CAAK,GAAL,CAIAD,CAAY,CAACmB,GAAb,CAAiB,sBAAjB,CAAyCD,CAAzC,CACH,CAED,MAAO,CACHE,IAAI,CAAE,cAASC,CAAT,CAAiB,CAEnB,GAAiC,IAA7B,GAAAA,CAAM,CAACC,iBAAP,EAAgE,CAA3B,CAAAD,CAAM,CAACC,iBAAhD,CAAuE,CAEnEtB,CAAY,CAAGJ,CAAC,CAAC,gEAAD,CAAhB,CAGA,GAA0B,CAAtB,CAAAI,CAAY,CAACuB,MAAjB,CAA6B,CAEzBvB,CAAY,CAACwB,EAAb,CAAgB,sBAAhB,CAAwCN,CAAxC,EAGAnB,CAAiB,CAAG0B,WAAW,CAACR,CAAD,CAAmD,EAAlC,EAA2B,GAA3B,CAAAI,CAAM,CAACC,iBAAP,CAAjB,CAClC,CACJ,CACJ,CAhBE,CAkBV,CAlGK,CAAN","sourcesContent":["/**\n * Local plugin \"Session keepalive\" - JS Code\n *\n * @package   local_session_keepalive\n * @copyright 2017 Alexander Bias, University of Ulm <alexander.bias@uni-ulm.de>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/config', 'core/log'], function($, config, log) {\n    \"use strict\";\n\n    // Global variable for keepalive interval.\n    var keepaliveInterval = null;\n\n    // Global variable for holding the form elements within the page's main region.\n    var formElements = null;\n\n    // Global variable for holding the dirty status.\n    var dirty = false;\n\n    /**\n     * Function to tell the server to keep the session alive.\n     */\n    function doKeepAlive() {\n        // Keep session alive by AJAX.\n        // We know about the benefits of the core/ajax module (https://docs.moodle.org/dev/AJAX),\n        // but for this very lightweight request we only use a simple jQuery AJAX call.\n        $.ajax({\n            url: config.wwwroot + '/local/session_keepalive/sessionkeepalive_ajax.php',\n            dataType: 'json',\n            type: 'POST',\n            data: {\n                // Add the session key.\n                'sesskey': config.sesskey,\n                // Add a query string to prevent older versions of IE from using the cache.\n                'time': $.now()\n            },\n            headers: {\n                'Cache-Control': 'no-cache',\n                'Expires': '-1'\n            },\n            /* This section exists for understanding the code, but it is commented because it does nothing.\n            success: function(result) {\n                // The AJAX call was successful.\n                if (result.status == 200) {\n                    // Don't care about the result (especially as there isn't any result sent back).\n                }\n            },\n            */\n            error: function(request) {\n                // The AJAX call returned 403, we have to assume that the session was terminated and can't be kept alive anymore.\n                if (request.status == 403) {\n                    // Stop doing any more requests.\n                    clearInterval(keepaliveInterval);\n\n                    // The AJAX call was cached somewhere.\n                } else if (request.status >= 300 && request.status <= 399) {\n                    // Warn the developer, but don't do anything else.\n                    log.debug('moodle-local_session_keepalive-keepalive: ' +\n                            'A cached copy of the keepalive answer was returned so it\\'s reliablity cannot be guaranteed');\n                }\n            }\n        });\n    }\n\n    /**\n     * Function which performs the continuous keepalive check.\n     */\n    function checkKeepAlive() {\n        // If the page is currently marked dirty.\n        if (dirty === true) {\n            // Keep the Moodle session of this user alive.\n            doKeepAlive();\n        }\n    }\n\n    /**\n     * Function to mark the page as currently dirty.\n     */\n    function markDirty() {\n        // Remember that the page is now dirty.\n        dirty = true;\n\n        // Now that the page is marked dirty, it has to be dirty until it is sent to the server.\n        // We don't need the event listeners anymore.\n        formElements.off('change keyup keydown', markDirty);\n    }\n\n    return {\n        init: function(params) {\n            // Initialize continuous keepalive check.\n            if (params.keepaliveinterval !== null && params.keepaliveinterval > 0) {\n                // Search all existing form elements within the page's main region.\n                formElements = $('#region-main input, #region-main textarea, #region-main select');\n\n                // If there are any form elements.\n                if (formElements.length > 0) {\n                    // Add the event listeners to the form elements.\n                    formElements.on('change keyup keydown', markDirty);\n\n                    // Keepalive every params.keepaliveinterval minutes.\n                    keepaliveInterval = setInterval(checkKeepAlive, params.keepaliveinterval * 1000 * 60);\n                }\n            }\n        }\n    };\n});\n"],"file":"keepalive.min.js"}